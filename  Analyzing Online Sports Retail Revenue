{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a72bb100",
   "metadata": {
    "papermill": {
     "duration": 0.007694,
     "end_time": "2024-09-06T14:56:13.715235",
     "exception": false,
     "start_time": "2024-09-06T14:56:13.707541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Analyzing Online Sports Retail Revenue\n",
    "\n",
    "## 1. Importing Libraries\n",
    "\n",
    "```python\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3fd7e59d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:13.730499Z",
     "iopub.status.busy": "2024-09-06T14:56:13.730010Z",
     "iopub.status.idle": "2024-09-06T14:56:14.170839Z",
     "shell.execute_reply": "2024-09-06T14:56:14.169517Z"
    },
    "papermill": {
     "duration": 0.451462,
     "end_time": "2024-09-06T14:56:14.173671",
     "exception": false,
     "start_time": "2024-09-06T14:56:13.722209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/reviews_v2.csv\n",
      "/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/finance.csv\n",
      "/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/brands_v2.csv\n",
      "/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/traffic_v3.csv\n",
      "/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/info_v2.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fac5caad",
   "metadata": {
    "papermill": {
     "duration": 0.007746,
     "end_time": "2024-09-06T14:56:14.188285",
     "exception": false,
     "start_time": "2024-09-06T14:56:14.180539",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2 .Installing Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f27d4488",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:14.203530Z",
     "iopub.status.busy": "2024-09-06T14:56:14.202953Z",
     "iopub.status.idle": "2024-09-06T14:56:48.039857Z",
     "shell.execute_reply": "2024-09-06T14:56:48.038520Z"
    },
    "papermill": {
     "duration": 33.847617,
     "end_time": "2024-09-06T14:56:48.042620",
     "exception": false,
     "start_time": "2024-09-06T14:56:14.195003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sqlalchemy in /opt/conda/lib/python3.10/site-packages (2.0.30)\r\n",
      "Requirement already satisfied: typing-extensions>=4.6.0 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy) (4.12.2)\r\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy) (3.0.3)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install sqlalchemy\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86d03983",
   "metadata": {
    "papermill": {
     "duration": 0.006389,
     "end_time": "2024-09-06T14:56:48.055923",
     "exception": false,
     "start_time": "2024-09-06T14:56:48.049534",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3.Importing Libraries for SQL Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "600c3162",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:48.071484Z",
     "iopub.status.busy": "2024-09-06T14:56:48.070981Z",
     "iopub.status.idle": "2024-09-06T14:56:48.776556Z",
     "shell.execute_reply": "2024-09-06T14:56:48.775545Z"
    },
    "papermill": {
     "duration": 0.716456,
     "end_time": "2024-09-06T14:56:48.779101",
     "exception": false,
     "start_time": "2024-09-06T14:56:48.062645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7faa1543",
   "metadata": {
    "papermill": {
     "duration": 0.006407,
     "end_time": "2024-09-06T14:56:48.792474",
     "exception": false,
     "start_time": "2024-09-06T14:56:48.786067",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4.Loading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a3289fec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:48.808871Z",
     "iopub.status.busy": "2024-09-06T14:56:48.807253Z",
     "iopub.status.idle": "2024-09-06T14:56:48.900538Z",
     "shell.execute_reply": "2024-09-06T14:56:48.899432Z"
    },
    "papermill": {
     "duration": 0.10395,
     "end_time": "2024-09-06T14:56:48.903139",
     "exception": false,
     "start_time": "2024-09-06T14:56:48.799189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "info = pd.read_csv('/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/info_v2.csv')\n",
    "finance = pd.read_csv('/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/finance.csv')\n",
    "traffic = pd.read_csv('/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/traffic_v3.csv')\n",
    "brands = pd.read_csv('/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/brands_v2.csv')\n",
    "reviews = pd.read_csv('/kaggle/input/datacamp-optimizing-online-sports-retail-revenue/reviews_v2.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc1921de",
   "metadata": {
    "papermill": {
     "duration": 0.006932,
     "end_time": "2024-09-06T14:56:48.917028",
     "exception": false,
     "start_time": "2024-09-06T14:56:48.910096",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5.Creating an SQLite Engine and Loading Data into Database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03a1898d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:48.933000Z",
     "iopub.status.busy": "2024-09-06T14:56:48.932154Z",
     "iopub.status.idle": "2024-09-06T14:56:49.185992Z",
     "shell.execute_reply": "2024-09-06T14:56:49.184826Z"
    },
    "papermill": {
     "duration": 0.264514,
     "end_time": "2024-09-06T14:56:49.188546",
     "exception": false,
     "start_time": "2024-09-06T14:56:48.924032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3179"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sqlalchemy import create_engine\n",
    "\n",
    "# Create an SQLite engine\n",
    "engine = create_engine('sqlite:///:memory:')\n",
    "\n",
    "# Load data into the SQLite database\n",
    "info.to_sql('info', engine, index=False, if_exists='replace')\n",
    "finance.to_sql('finance', engine, index=False, if_exists='replace')\n",
    "traffic.to_sql('traffic', engine, index=False, if_exists='replace')\n",
    "brands.to_sql('brands', engine, index=False, if_exists='replace')\n",
    "reviews.to_sql('reviews', engine, index=False, if_exists='replace')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29c67e06",
   "metadata": {
    "papermill": {
     "duration": 0.006538,
     "end_time": "2024-09-06T14:56:49.202207",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.195669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6.Data Integrity Check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "29efd220",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:49.217370Z",
     "iopub.status.busy": "2024-09-06T14:56:49.216956Z",
     "iopub.status.idle": "2024-09-06T14:56:49.239469Z",
     "shell.execute_reply": "2024-09-06T14:56:49.238110Z"
    },
    "papermill": {
     "duration": 0.033105,
     "end_time": "2024-09-06T14:56:49.242031",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.208926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   total_rows  count_description  count_listing_price  count_last_visited\n",
      "0        3179               3117                 3120                2928\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "SELECT COUNT(*) AS total_rows,\n",
    "       COUNT(info.description) AS count_description,\n",
    "       COUNT(finance.listing_price) AS count_listing_price,\n",
    "       COUNT(traffic.last_visited) AS count_last_visited\n",
    "FROM info\n",
    "INNER JOIN finance ON info.product_id = finance.product_id\n",
    "INNER JOIN traffic ON info.product_id = traffic.product_id\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "572fe278",
   "metadata": {
    "papermill": {
     "duration": 0.006843,
     "end_time": "2024-09-06T14:56:49.255918",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.249075",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 7.Analyzing Listing Prices by Brand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2f242e78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:49.271477Z",
     "iopub.status.busy": "2024-09-06T14:56:49.271048Z",
     "iopub.status.idle": "2024-09-06T14:56:49.292479Z",
     "shell.execute_reply": "2024-09-06T14:56:49.291246Z"
    },
    "papermill": {
     "duration": 0.032168,
     "end_time": "2024-09-06T14:56:49.295040",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.262872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     brand  listing_price_int  count\n",
      "0   Adidas                299      2\n",
      "1   Adidas                279      4\n",
      "2   Adidas                239      5\n",
      "3   Adidas                229      8\n",
      "4   Adidas                219     11\n",
      "..     ...                ...    ...\n",
      "72  Adidas                 14     27\n",
      "73  Adidas                 12     27\n",
      "74  Adidas                 11      1\n",
      "75  Adidas                  9     11\n",
      "76  Adidas                  8      1\n",
      "\n",
      "[77 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "SELECT brand, CAST(listing_price AS int) AS listing_price_int, COUNT(*) AS count\n",
    "FROM finance\n",
    "INNER JOIN brands ON finance.product_id = brands.product_id\n",
    "WHERE listing_price > 0\n",
    "GROUP BY brand, listing_price\n",
    "ORDER BY listing_price DESC\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb218d13",
   "metadata": {
    "papermill": {
     "duration": 0.006745,
     "end_time": "2024-09-06T14:56:49.309233",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.302488",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 8.Analyzing Revenue by Brand and Price Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b7f748bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:49.324997Z",
     "iopub.status.busy": "2024-09-06T14:56:49.324584Z",
     "iopub.status.idle": "2024-09-06T14:56:49.345783Z",
     "shell.execute_reply": "2024-09-06T14:56:49.344216Z"
    },
    "papermill": {
     "duration": 0.031955,
     "end_time": "2024-09-06T14:56:49.348179",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.316224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    brand  count  total_revenue price_category\n",
      "0  Adidas    849     4626980.07      Expensive\n",
      "1  Adidas   1060     3233661.06        Average\n",
      "2  Adidas    307     3014316.83          Elite\n",
      "3  Adidas    359      651661.12         Budget\n",
      "4    Nike    357      595341.02         Budget\n",
      "5    Nike     82      128475.59          Elite\n",
      "6    Nike     90       71843.15      Expensive\n",
      "7    Nike     16        6623.50        Average\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "SELECT brand, COUNT(*) AS count, SUM(revenue) AS total_revenue,\n",
    "       CASE \n",
    "           WHEN listing_price < 42 THEN 'Budget'\n",
    "           WHEN listing_price >= 42 AND listing_price < 74 THEN 'Average'\n",
    "           WHEN listing_price >= 74 AND listing_price < 129 THEN 'Expensive'\n",
    "           ELSE 'Elite' \n",
    "       END AS price_category\n",
    "FROM finance\n",
    "INNER JOIN brands ON finance.product_id = brands.product_id\n",
    "WHERE brand IS NOT NULL\n",
    "GROUP BY brand, price_category\n",
    "ORDER BY total_revenue DESC\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80ace53c",
   "metadata": {
    "papermill": {
     "duration": 0.006808,
     "end_time": "2024-09-06T14:56:49.362182",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.355374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 9.Calculating Average Discount by Brand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4789eb72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:49.378387Z",
     "iopub.status.busy": "2024-09-06T14:56:49.377570Z",
     "iopub.status.idle": "2024-09-06T14:56:49.393796Z",
     "shell.execute_reply": "2024-09-06T14:56:49.392385Z"
    },
    "papermill": {
     "duration": 0.027094,
     "end_time": "2024-09-06T14:56:49.396325",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.369231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    brand  average_discount\n",
      "0  Adidas         33.452427\n",
      "1    Nike          0.000000\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "SELECT brand, AVG(discount) * 100 AS average_discount\n",
    "FROM finance\n",
    "INNER JOIN brands ON finance.product_id = brands.product_id\n",
    "GROUP BY brand\n",
    "HAVING brand IS NOT NULL\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e66f9a26",
   "metadata": {
    "papermill": {
     "duration": 0.007673,
     "end_time": "2024-09-06T14:56:49.411492",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.403819",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 10.Correlation Between Reviews and Revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5804f2ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:49.428369Z",
     "iopub.status.busy": "2024-09-06T14:56:49.427275Z",
     "iopub.status.idle": "2024-09-06T14:56:50.466470Z",
     "shell.execute_reply": "2024-09-06T14:56:50.465126Z"
    },
    "papermill": {
     "duration": 1.050327,
     "end_time": "2024-09-06T14:56:50.469047",
     "exception": false,
     "start_time": "2024-09-06T14:56:49.418720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation between reviews and revenue: 0.65\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Define the SQL query to retrieve reviews and revenue\n",
    "query = \"\"\"\n",
    "SELECT reviews.reviews, finance.revenue\n",
    "FROM finance\n",
    "INNER JOIN reviews ON finance.product_id = reviews.product_id\n",
    "\"\"\"\n",
    "\n",
    "# Execute the query and load the data into a DataFrame\n",
    "data = pd.read_sql_query(query, engine)\n",
    "from scipy.stats import pearsonr\n",
    "\n",
    "# Drop rows with missing values\n",
    "data = data.dropna()\n",
    "\n",
    "# Calculate the correlation\n",
    "correlation, _ = pearsonr(data['reviews'], data['revenue'])\n",
    "\n",
    "print(f'Correlation between reviews and revenue: {correlation:.2f}')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8e4e7c2",
   "metadata": {
    "papermill": {
     "duration": 0.007176,
     "end_time": "2024-09-06T14:56:50.483669",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.476493",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 11.Analyzing Review Ratings by Description Length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1df30ac1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:50.500783Z",
     "iopub.status.busy": "2024-09-06T14:56:50.500170Z",
     "iopub.status.idle": "2024-09-06T14:56:50.520822Z",
     "shell.execute_reply": "2024-09-06T14:56:50.519616Z"
    },
    "papermill": {
     "duration": 0.031893,
     "end_time": "2024-09-06T14:56:50.523263",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.491370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     description_length  average_rating\n",
      "0                    14            1.50\n",
      "1                    83            5.00\n",
      "2                    93            0.00\n",
      "3                    97            0.00\n",
      "4                    99            2.35\n",
      "..                  ...             ...\n",
      "349                 660            4.70\n",
      "350                 668            4.40\n",
      "351                 669            4.10\n",
      "352                 671            3.50\n",
      "353                 687            4.05\n",
      "\n",
      "[354 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "SELECT LENGTH(description) AS description_length, \n",
    "       ROUND(AVG(rating * 1.0), 2) AS average_rating\n",
    "FROM info\n",
    "INNER JOIN reviews ON info.product_id = reviews.product_id\n",
    "WHERE description IS NOT NULL\n",
    "GROUP BY LENGTH(description)\n",
    "ORDER BY LENGTH(description)\n",
    "\"\"\"\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9be8b950",
   "metadata": {
    "papermill": {
     "duration": 0.007052,
     "end_time": "2024-09-06T14:56:50.537835",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.530783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 12.Monthly Review Counts by Brand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "17caa2b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:50.555240Z",
     "iopub.status.busy": "2024-09-06T14:56:50.554793Z",
     "iopub.status.idle": "2024-09-06T14:56:50.580455Z",
     "shell.execute_reply": "2024-09-06T14:56:50.578818Z"
    },
    "papermill": {
     "duration": 0.037812,
     "end_time": "2024-09-06T14:56:50.583015",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.545203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     brand month  num_reviews\n",
      "0   Adidas    01          253\n",
      "1   Adidas    02          272\n",
      "2   Adidas    03          269\n",
      "3   Adidas    04          180\n",
      "4   Adidas    05          172\n",
      "5   Adidas    06          159\n",
      "6   Adidas    07          170\n",
      "7   Adidas    08          189\n",
      "8   Adidas    09          181\n",
      "9   Adidas    10          192\n",
      "10  Adidas    11          150\n",
      "11  Adidas    12          190\n",
      "12    Nike    01           52\n",
      "13    Nike    02           52\n",
      "14    Nike    03           55\n",
      "15    Nike    04           42\n",
      "16    Nike    05           41\n",
      "17    Nike    06           43\n",
      "18    Nike    07           37\n",
      "19    Nike    08           29\n",
      "20    Nike    09           28\n",
      "21    Nike    10           47\n",
      "22    Nike    11           38\n",
      "23    Nike    12           35\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "SELECT brand, \n",
    "       strftime('%m', last_visited) AS month,\n",
    "       COUNT(reviews) AS num_reviews\n",
    "FROM reviews\n",
    "INNER JOIN traffic ON reviews.product_id = traffic.product_id\n",
    "INNER JOIN brands ON reviews.product_id = brands.product_id\n",
    "GROUP BY brand, month\n",
    "HAVING brand IS NOT NULL\n",
    "AND strftime('%m', last_visited) IS NOT NULL\n",
    "ORDER BY brand, month\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a960cf",
   "metadata": {
    "papermill": {
     "duration": 0.007144,
     "end_time": "2024-09-06T14:56:50.597767",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.590623",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 13. Analyzing Footwear Products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5028e279",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:50.615151Z",
     "iopub.status.busy": "2024-09-06T14:56:50.614142Z",
     "iopub.status.idle": "2024-09-06T14:56:50.634960Z",
     "shell.execute_reply": "2024-09-06T14:56:50.633793Z"
    },
    "papermill": {
     "duration": 0.032372,
     "end_time": "2024-09-06T14:56:50.637564",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.605192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   num_footwear_products  median_revenue\n",
      "0                      1         3455.14\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "WITH footwear AS (\n",
    "    SELECT description, revenue\n",
    "    FROM info\n",
    "    INNER JOIN finance ON info.product_id = finance.product_id\n",
    "    WHERE (description LIKE '%shoe%' OR description LIKE '%trainer%' OR description LIKE '%foot')\n",
    "      AND description IS NOT NULL\n",
    "),\n",
    "ordered_footwear AS (\n",
    "    SELECT revenue,\n",
    "           ROW_NUMBER() OVER (ORDER BY revenue) AS rn,\n",
    "           COUNT(*) OVER () AS total_count\n",
    "    FROM footwear\n",
    "),\n",
    "median_calculation AS (\n",
    "    SELECT AVG(revenue) AS median_revenue\n",
    "    FROM ordered_footwear\n",
    "    WHERE rn IN ((total_count + 1) / 2, (total_count + 2) / 2)\n",
    ")\n",
    "SELECT COUNT(*) AS num_footwear_products, \n",
    "       median_revenue\n",
    "FROM median_calculation\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adc657fe",
   "metadata": {
    "papermill": {
     "duration": 0.00715,
     "end_time": "2024-09-06T14:56:50.652237",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.645087",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 14.Listing Non-Footwear Products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2217404e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:50.671904Z",
     "iopub.status.busy": "2024-09-06T14:56:50.671201Z",
     "iopub.status.idle": "2024-09-06T14:56:50.699869Z",
     "shell.execute_reply": "2024-09-06T14:56:50.698505Z"
    },
    "papermill": {
     "duration": 0.041417,
     "end_time": "2024-09-06T14:56:50.702673",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.661256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                           description  revenue\n",
      "0    The adidas casual sandals for men with a strik...   827.30\n",
      "1    Energize your run while staying comfortable wi...   251.91\n",
      "2    The adidas casual sandals for men with a strik...   308.48\n",
      "3    Energize your run while staying comfortable wi...  1813.75\n",
      "4    These adidas Jung slippers for women come with...   179.64\n",
      "..                                                 ...      ...\n",
      "412  The Nike Zoom Pegasus Turbo 2 is updated with ...   230.35\n",
      "413  The Nike Tiempo Legend 8 Academy TF takes the ...     0.00\n",
      "414  The Air Jordan 8 Retro recaptures the memorabl...   230.35\n",
      "415  The Nike Air Max 98 features the OG design lin...  1223.64\n",
      "416  A mash-up of Pegasus' past, the Nike P-6000 SE...     0.00\n",
      "\n",
      "[417 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "query = \"\"\"\n",
    "WITH footwear AS (\n",
    "    SELECT description, revenue\n",
    "    FROM info\n",
    "    INNER JOIN finance ON info.product_id = finance.product_id\n",
    "    WHERE (description LIKE '%shoe%'\n",
    "           OR description LIKE '%trainer%'\n",
    "           OR description LIKE '%foot%')\n",
    "      AND description IS NOT NULL\n",
    ")\n",
    "SELECT description, revenue\n",
    "FROM info\n",
    "INNER JOIN finance ON info.product_id = finance.product_id\n",
    "WHERE description NOT IN (SELECT description FROM footwear)\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "result = pd.read_sql_query(query, engine)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a520d174",
   "metadata": {
    "papermill": {
     "duration": 0.007603,
     "end_time": "2024-09-06T14:56:50.719016",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.711413",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 15.Extract Month and Year Information and Aggregate Sales and Revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "888fc02a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:50.735961Z",
     "iopub.status.busy": "2024-09-06T14:56:50.735539Z",
     "iopub.status.idle": "2024-09-06T14:56:50.741160Z",
     "shell.execute_reply": "2024-09-06T14:56:50.739919Z"
    },
    "papermill": {
     "duration": 0.016908,
     "end_time": "2024-09-06T14:56:50.743632",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.726724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = \"\"\"-- Add month and year columns\n",
    "ALTER TABLE traffic ADD COLUMN year INTEGER;\n",
    "ALTER TABLE traffic ADD COLUMN month INTEGER;\n",
    "\n",
    "-- Update the month and year columns\n",
    "UPDATE traffic\n",
    "SET year = strftime('%Y', last_visited),\n",
    "    month = strftime('%m', last_visited);\n",
    "    \n",
    "-- Aggregate total sales and revenue by year and month\n",
    "WITH monthly_data AS (\n",
    "    SELECT\n",
    "        strftime('%Y', traffic.last_visited) AS year,\n",
    "        strftime('%m', traffic.last_visited) AS month,\n",
    "        COUNT(*) AS total_sales,\n",
    "        SUM(finance.revenue) AS total_revenue\n",
    "    FROM traffic\n",
    "    INNER JOIN finance ON traffic.product_id = finance.product_id\n",
    "    GROUP BY year, month\n",
    ")\n",
    "SELECT * FROM monthly_data\n",
    "ORDER BY year, month;\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a8979e4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-06T14:56:50.761879Z",
     "iopub.status.busy": "2024-09-06T14:56:50.760911Z",
     "iopub.status.idle": "2024-09-06T14:56:51.211735Z",
     "shell.execute_reply": "2024-09-06T14:56:51.210666Z"
    },
    "papermill": {
     "duration": 0.463074,
     "end_time": "2024-09-06T14:56:51.214586",
     "exception": false,
     "start_time": "2024-09-06T14:56:50.751512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Retrieve the data from the database\n",
    "query = \"\"\"\n",
    "WITH monthly_data AS (\n",
    "    SELECT\n",
    "        strftime('%Y', traffic.last_visited) AS year,\n",
    "        strftime('%m', traffic.last_visited) AS month,\n",
    "        COUNT(*) AS total_sales,\n",
    "        SUM(finance.revenue) AS total_revenue\n",
    "    FROM traffic\n",
    "    INNER JOIN finance ON traffic.product_id = finance.product_id\n",
    "    GROUP BY year, month\n",
    ")\n",
    "SELECT * FROM monthly_data\n",
    "ORDER BY year, month;\n",
    "\"\"\"\n",
    "\n",
    "monthly_trends = pd.read_sql_query(query, engine)\n",
    "\n",
    "# Pivot the data for plotting\n",
    "pivot_trends = monthly_trends.pivot(index='month', columns='year', values='total_revenue')\n",
    "pivot_trends.index = pivot_trends.index.astype(str)\n",
    "pivot_trends.columns = pivot_trends.columns.astype(str)\n",
    "\n",
    "# Plot the data\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "for year in pivot_trends.columns:\n",
    "    plt.plot(pivot_trends.index, pivot_trends[year], label=f'Year {year}')\n",
    "\n",
    "plt.title('Monthly Revenue Trends')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Total Revenue')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2532043,
     "sourceId": 4297276,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 40.941908,
   "end_time": "2024-09-06T14:56:51.944369",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-06T14:56:11.002461",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
